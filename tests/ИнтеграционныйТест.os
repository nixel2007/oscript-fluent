#Использовать asserts
#Использовать notify
#Использовать ".."

Перем ФункцияОбработки;
Перем ФункцияСокращения;
Перем ФункцияФильтрации;

Перем ДействиеОбработки;
Перем ДействиеСокращения;
Перем ДействиеФильтрации;

Процедура ОбработчикФильтрации(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Элемент > 3;
КонецПроцедуры

Процедура ОбработчикОбработки(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Элемент + 1;
КонецПроцедуры

Процедура ОбработчикСокращения(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Результат + Элемент;
КонецПроцедуры

Функция ДействиеФильтрации(Элемент) Экспорт
	Возврат Элемент > 3;
КонецФункции

Функция ДействиеОбработки(Элемент) Экспорт
	Возврат Элемент + 1;
КонецФункции

Функция ДействиеСокращения(Результат, Элемент) Экспорт
	Возврат Результат + Элемент;
КонецФункции

Функция ПолучитьНачальныйМассив()
	
	Массив = Новый Массив;
	Массив.Добавить(3);
	Массив.Добавить(4);
	Массив.Добавить(7);
	Массив.Добавить(5);
	Массив.Добавить(1);
	Массив.Добавить(0);
	
	Возврат Массив;
КонецФункции

Функция ПолучитьПроцессорКоллекций()
	
	Возврат ПроцессорыКоллекций.ИзКоллекции(ПолучитьНачальныйМассив());
	
КонецФункции

&Тест
Процедура ТестДолжен_1() Экспорт

	Результат = ПолучитьПроцессорКоллекций()
		.Пропустить(2)
		.Фильтровать(ФункцияФильтрации)
		.Первые(2)
		.Обработать(ФункцияОбработки)
		.Получить(Тип("Массив"));

	Ожидаем.Что(Результат[0]).Равно(8);
	Ожидаем.Что(Результат[1]).Равно(6);

КонецПроцедуры

&Тест
Процедура ТестДолжен_1_1() Экспорт

	Результат = ПолучитьПроцессорКоллекций()
		.Пропустить(2)
		.Фильтровать(ДействиеФильтрации)
		.Первые(2)
		.Обработать(ДействиеОбработки)
		.Получить(Тип("Массив"));

	Ожидаем.Что(Результат[0]).Равно(8);
	Ожидаем.Что(Результат[1]).Равно(6);

КонецПроцедуры

&Тест
Процедура ТестДолжен_2() Экспорт

	Результат = ПолучитьПроцессорКоллекций()
		.Сортировать()
		.ВМассив();

	Ожидаем.Что(Результат[0]).Равно(0);
	Ожидаем.Что(Результат[1]).Равно(1);
	Ожидаем.Что(Результат[2]).Равно(3);
	Ожидаем.Что(Результат[3]).Равно(4);
	Ожидаем.Что(Результат[4]).Равно(5);
	Ожидаем.Что(Результат[5]).Равно(7);

КонецПроцедуры

&Тест
Процедура ТестДолжен_3() Экспорт

	Результат = ПолучитьПроцессорКоллекций()
		.Обработать(ФункцияОбработки)
		.Сократить(ФункцияСокращения, 0);

	Ожидаем.Что(Результат).Равно(26);

КонецПроцедуры

&Тест
Процедура ТестДолжен_3_1() Экспорт

	Результат = ПолучитьПроцессорКоллекций()
		.Обработать(ДействиеОбработки)
		.Сократить(ДействиеСокращения, 0);

	Ожидаем.Что(Результат).Равно(26);

КонецПроцедуры

&Тест
Процедура ТестДолжен_4() Экспорт

	// Результат должен различаться
	Результат = ПолучитьПроцессорКоллекций()
		.Сортировать()
		.Первые(1)
		.Получить("Массив");
	
	Ожидаем.Что(Результат[0]).Равно(0);
	Ожидаем.Что(ПолучитьНачальныйМассив()[0]).Равно(3);
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_5() Экспорт
	
	Строка = "ФЫВА";
	Результат = ПроцессорыКоллекций.ИзСтроки(Строка)
		.Сортировать()
		.ВСтроку();
	
	Ожидаем.Что(Результат).Равно("АВФЫ");
	
КонецПроцедуры

&Тест
Процедура ТестДолжен_6() Экспорт

	Строка = "Я строка с пробелами";
	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, " ")
		.ВСтроку();
	
	Ожидаем.Что(Результат).Равно("Ястрокаспробелами");

КонецПроцедуры

&Тест
Процедура ТестДолжен_7() Экспорт
	
	Строка = 
		"Я
		|строка
		|многострочная";

	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, Символы.ПС)
		.Сортировать()
		.ВСтроку(Символы.ПС);
	
	Ожидаем.Что(Результат).Равно(
		"многострочная
		|строка
		|Я"
	);

КонецПроцедуры

&Тест
Процедура ТестДолжен_8() Экспорт

	Строка = 
		"Я
		|строка
		|многострочная";

	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, Символы.ПС)
		.Фильтровать("Результат = СтрДлина(Элемент) > 1")
		.ВСтроку(Символы.ПС);

	Ожидаем.Что(Результат).Равно(
		"строка
		|многострочная"
	);

КонецПроцедуры

&Тест
Процедура ТестДолжен_8_1() Экспорт

	Строка = 
		"Я
		|строка
		|многострочная";

	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, Символы.ПС)
		.Фильтровать("Элемент -> СтрДлина(Элемент) > 1")
		.ВСтроку(Символы.ПС);

	Ожидаем.Что(Результат).Равно(
		"строка
		|многострочная"
	);

КонецПроцедуры

&Тест
Процедура ТестДолжен_9() Экспорт
	
	Строка = 
		"Я
		|строка
		|многострочная";

	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, Символы.ПС)
		.Сортировать("Результат = ВРЕГ(Элемент1) > ВРЕГ(Элемент2)")
		.ВСтроку(Символы.ПС);
	
	Ожидаем.Что(Результат).Равно(
		"многострочная
		|строка
		|Я"
	);

КонецПроцедуры

&Тест
Процедура ТестДолжен_9_1() Экспорт
	
	Строка = 
		"Я
		|строка
		|многострочная";

	Результат = ПроцессорыКоллекций.ИзСтроки(Строка, Символы.ПС)
		.Сортировать("Первый, Второй -> 
			|	Если ВРЕГ(Первый) > ВРЕГ(Второй) Тогда
			|		Возврат 1;
			|	ИначеЕсли ВРЕГ(Второй) > ВРЕГ(Первый) Тогда
			|		Возврат -1;
			|	Иначе
			|		Возврат 0;
			|	КонецЕсли;"
		)
		.ВСтроку(Символы.ПС);
	
	Ожидаем.Что(Результат).Равно(
		"многострочная
		|строка
		|Я"
	);

КонецПроцедуры

ФункцияФильтрации = Новый ОписаниеОповещения("ОбработчикФильтрации", ЭтотОбъект);
ФункцияОбработки = Новый ОписаниеОповещения("ОбработчикОбработки", ЭтотОбъект);
ФункцияСокращения = Новый ОписаниеОповещения("ОбработчикСокращения", ЭтотОбъект);

ДействиеФильтрации = Новый Действие(ЭтотОбъект, "ДействиеФильтрации");
ДействиеСокращения = Новый Действие(ЭтотОбъект, "ДействиеСокращения");
ДействиеОбработки  = Новый Действие(ЭтотОбъект, "ДействиеОбработки");
