#Использовать logos
#Использовать strings
#Использовать tempfiles

#Использовать "../internal"

Перем Лог;

Перем Коллекция;
Перем КэшКолонок;

Перем Конвейер;
Перем НомерПроходаКонвейера;

// Флаг поддержки возможности отладки добавленных методов
Перем Отладка;

// Общее API

// Устанавливает коллекцию для обработки Процессора коллекций.
//
// Параметры:
//   НоваяКоллекция - Массив, ТаблицаЗначений, ДеревоЗначений - Коллекция, устанавливаемая в процессор.
//
Процедура УстановитьКоллекцию(НоваяКоллекция) Экспорт
	
	Коллекция = Новый Массив;
	
	Для Каждого ЭлементНовойКоллекции Из НоваяКоллекция Цикл
		Коллекция.Добавить(ЭлементНовойКоллекции);
	КонецЦикла;
	
	КэшКолонок = Новый Массив;

	ЕстьРеквизитКолонки = Истина;
	Попытка
		Колонки = НоваяКоллекция.Колонки;
	Исключение
		ЕстьРеквизитКолонки = Ложь;
	КонецПопытки;

	Если ЕстьРеквизитКолонки Тогда
		Для Каждого Колонка Из НоваяКоллекция.Колонки Цикл
			КэшКолонок.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;

	Лог.Отладка("Кэш колонок содержит %1 колонок", КэшКолонок.Количество());
	Лог.Отладка("Установлена коллекция размером %1", Коллекция.Количество());

КонецПроцедуры

// Включает возможность отладки. Достигается сохранением текста модуля во временный файл.
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Ссылка на текущий инстанс ПроцессорКоллекций
//
Функция Отладка(Включена = Истина) Экспорт
	Отладка = Включена;
	Возврат ЭтотОбъект;
КонецФункции

// Конвейерные методы

// Получить первые N элементов.
// Конвейерный метод.
//
// Параметры:
//   Количество - Число - Число отбираемых элементов.
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
Функция Первые(Количество) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераПервые(Количество));
	Возврат ЭтотОбъект;
КонецФункции

// Пропустить первые N элементов.
// Конвейерный метод.
//
// Параметры:
//   Количество - Число - Число пропускаемых элементов.
//
// Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
Функция Пропустить(Количество) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераПропустить(Количество));
	Возврат ЭтотОбъект;
КонецФункции

// Выбрать различные элементы.
// Конвейерный метод.
//
// Параметры:
//   ФункцияРавенства - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы два элемента,
//    и которая возвращает Булево, Истина если элементы равны, Ложь в противном случае
//                    - Действие - Делегат на функцию с двумя параметрами, в которые будут переданы два элемента,
//    и которая возвращает Булево, Истина если элементы равны, Ложь в противном случае
//                    - Неопределено - см. ПроцессорыКоллекций.СтандартнаяФункцияРавенства(),
//    проверка "Элемент1 = Элемент2"
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//
//   ПроцессорКоллекций = ПроцессорыКоллекций.ИзНабора(
//       Новый Структура("Имя, Возраст", "Вася", 25),
//       Новый Структура("Имя, Возраст", "Петя", 27),
//       Новый Структура("Имя, Возраст", "Ваня", 25)
//   );
//
//   // 1:
//   ПроцессорКоллекций.Различные("(ЧеловекПервый, ЧеловекВторой) -> ЧеловекПервый.Возраст = ЧеловекВторой.Возраст");
//
//   // В коллекции останутся: Вася(25) и Петя(27)
//
//   // 2:
//   Функция МояФункцияФункцияРавенства(ЭлементПервый, ЭлементВторой) Экспорт
//       Возврат ЧеловекПервый.Возраст = ЧеловекВторой.Возраст;
//   КонецФункции
//
//   ПроцессорКоллекций.Различные(Новый Действие(ЭтотОбъект, "МояФункцияФункцияРавенства"));
//
//   // В коллекции останутся: Вася(25) и Петя(27)
//
Функция Различные(Знач ФункцияРавенства = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераРазличные(ФункцияРавенства, ДополнительныеПараметры, Отладка));
	Возврат ЭтотОбъект;
КонецФункции

// Обработать каждый элемент коллекции.
// Конвейерный метод.
//
// Параметры:
//   ФункцияОбработки - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает новый элемент
//                    - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает новый элемент
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.Обработать("Элемент -> Элемент + 1");
//
//		// 2:
//		Функция МояФункцияОбработки(Элемент) Экспорт
//			Возврат Элемент + 1;
//		КонецФункции
//
//		ФункцияОбработки = Новый Действие(ЭтотОбъект, "МояФункцияОбработки");
//		ПроцессорКоллекций.Обработать(ФункцияОбработки);
//
Функция Обработать(Знач ФункцияОбработки, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераОбработать(ФункцияОбработки, ДополнительныеПараметры, Отладка));
	Возврат ЭтотОбъект;
КонецФункции

// Развернуть каждый элемент коллекции в процессор коллекций.
// Позволяет расширить имеющуюся коллекцию.
// Например, разворачивание массива массивов сделает новый массив, содержащий все элементы всех массивов.
// Конвейерный метод.
//
// Параметры:
//   ФункцияРазворачивания - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает ПроцессорКоллекций из элемента
//                         - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает ПроцессорКоллекций из элемента
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
// Возвращаемое значение:
//	ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
// Примеры:
//	// 1:
//	ПроцессорКоллекций.Развернуть("Элемент -> ПроцессорыКоллекций.ИзСтроки(Элемент)");
//
//	// 2:
//	Функция МояФункцияРазворачивания(Элемент) Экспорт
//		Возврат ПроцессорыКоллекций.ИзСтроки(Элемент);
//	КонецФункции
//	
//	ФункцияРазворачивания = Новый Действие(ЭтотОбъект, "МояФункцияРазворачивания");
//	ПроцессорКоллекций.Развернуть(ФункцияРазворачивания);
//
Функция Развернуть(Знач ФункцияРазворачивания, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераРазвернуть(ФункцияРазворачивания, ДополнительныеПараметры, Отладка));
	Возврат ЭтотОбъект;
КонецФункции

// Фильтровать коллекцию по условию.
// Конвейерный метод.
//
// Параметры:
//   ФункцияФильтрации - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//                         - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.Фильтровать("Элемент -> СтрДлина(Элемент) > 1");
//
//		// 2:
//		Функция МояФункцияФильтрации(Результат, ДополнительныеПараметры) Экспорт
//			Возврат СтрДлина(ДополнительныеПараметры.Элемент) > 1;
//		КонецФункции
//		
//		ФункцияФильтрации = Новый Действие(ЭтотОбъект, "МояФункцияФильтрации");
//		ПроцессорКоллекций.Фильтровать(ФункцияФильтрации);
//
Функция Фильтровать(Знач ФункцияФильтрации, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераФильтровать(ФункцияФильтрации, ДополнительныеПараметры, Отладка));
	Возврат ЭтотОбъект;
КонецФункции

// Сортировать элементы коллекции.
// Конвейерный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Действие - Делегат на функцию с двумя параметрами, в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Неопределено - см. ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок(),
//    проверка через ">", "<", "="
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.Сортировать("(Первый, Второй) -> 
//          | Если Первый > Второй Тогда Возврат 1;
//          | ИначеЕсли Второй > Первый Тогда Возврат -1;
//          | Иначе Возврат 0;
//          | КонецЕсли;"
//      );
//
//		// 2:
//		Функция МояФункцияСравнения(Первый, Второй) Экспорт
//          Если Первый > Второй Тогда 
//              Возврат 1;
//          ИначеЕсли Второй > Первый Тогда
//              Возврат -1;
//          Иначе 
//              Возврат 0;
//          КонецЕсли;
//		КонецФункции
//		
//		ФункцияСравнения = Новый Действие(ЭтотОбъект, "МояФункцияСравнения");
//		ПроцессорКоллекций.Сортировать(ФункцияСравнения);
//
Функция Сортировать(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераСортировать(ФункцияСравнения, ДополнительныеПараметры, Отладка));
	Возврат ЭтотОбъект;
КонецФункции

// Сортировать элементы коллекции по выбранному полю.
// Конвейерный метод.
//
// Параметры:
//   ИмяПоля - Строка - Имя поля элемента коллекции, по которому необходимо осуществлять сортировку.
//
//   ФункцияСравнения - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Действие - Делегат на функцию с двумя параметрами, в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Неопределено - см. ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок(),
//    проверка через ">", "<", "="
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.СортироватьПо("НомерСтроки", "(Первый, Второй) -> 
//          | Если Первый > Второй Тогда Возврат 1;
//          | ИначеЕсли Второй > Первый Тогда Возврат -1;
//          | Иначе Возврат 0;
//          | КонецЕсли;"
//      );
//
//		// 2:
//		Функция МояФункцияСравнения(Первый, Второй) Экспорт
//          Если Первый > Второй Тогда 
//              Возврат 1;
//          ИначеЕсли Второй > Первый Тогда
//              Возврат -1;
//          Иначе 
//              Возврат 0;
//          КонецЕсли;
//		КонецФункции
//		
//		ФункцияСравнения = Новый Действие(ЭтотОбъект, "МояФункцияСравнения");
//		ПроцессорКоллекций.СортироватьПо("НомерСтроки", ФункцияСравнения);
//
Функция СортироватьПо(
	Знач ИмяПоля,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ДобавитьШагВКонвейер(Новый ШагКонвейераСортировать(ФункцияСравнения, ДополнительныеПараметры, Отладка, ИмяПоля));
	Возврат ЭтотОбъект;
	
КонецФункции

// Терминальные методы

// Получить первый элемент.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Произвольный - Первый элемент из коллекции. Если коллекция пуста, возвращает Неопределено.
//
Функция ПолучитьПервый() Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераПолучитьПервый());
	Возврат ПройтиКонвейер();
КонецФункции

// Получить коллекцию в виде массива.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Массив - Массив элементов коллекции.
//
Функция ВМассив() Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераПолучить(Тип("Массив")));
	Возврат ПройтиКонвейер();
КонецФункции

// Получить коллекцию в виде строки.
// Терминальный метод.
//
// Параметры:
//	РазделительСтрок - Строка - Используемый разделитель между элементами при конкатенации строк.
// 
//  Возвращаемое значение:
//   Строка - Элементы коллекции, соединенные в строку методом конкатенации.
//
Функция ВСтроку(РазделительСтрок = "") Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераВСтроку(РазделительСтрок));
	Возврат ПройтиКонвейер();
КонецФункции

// Получить количество элементов коллекции.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Число - Количество элементов коллекции.
//
Функция Количество() Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераКоличество());
	Возврат ПройтиКонвейер();
КонецФункции

// Обработать каждый элемент коллекции и завершить работу процессора.
// Терминальный метод.
//
// Параметры:
//   ФункцияОбработки - Строка - Лямбда выражение процедура с одним параметром в который будет передан элемент
//                    - Действие - Делегат на процедуру с одним параметром в который будет передан элемент
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.ДляКаждого("Элемент -> Сообщить(Элемент);");
//
//		// 2:
//		Процедура МояПроцедураОбработки(Элемент) Экспорт
//			Сообщить(Элемент);
//		КонецПроцедуры
//		
//		ПроцедураОбработки = Новый Действие(ЭтотОбъект, "МояПроцедураОбработки");
//		ПроцессорКоллекций.ДляКаждого(ПроцедураОбработки);
//
Процедура ДляКаждого(Знач ФункцияОбработки, Знач ДополнительныеПараметры = Неопределено) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераДляКаждого(ФункцияОбработки, ДополнительныеПараметры, Отладка));
	ПройтиКонвейер();
КонецПроцедуры

// Получить минимальный элемент.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Действие - Делегат на функцию с двумя параметрами, в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Неопределено - см. ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок(),
//    проверка через ">", "<", "="
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Произвольный - минимальный элемент коллекции.
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.Минимум();
//
//		// 2:
//		ПроцессорКоллекций.Минимум("(Первый, Второй) -> 
//          | Если Первый > Второй Тогда Возврат 1;
//          | ИначеЕсли Второй > Первый Тогда Возврат -1;
//          | Иначе Возврат 0;
//          | КонецЕсли;"
//      );
//
//		// 3:
//		Функция МояФункцияСравнения(Первый, Второй) Экспорт
//          Если Первый > Второй Тогда 
//              Возврат 1;
//          ИначеЕсли Второй > Первый Тогда
//              Возврат -1;
//          Иначе 
//              Возврат 0;
//          КонецЕсли;
//		КонецФункции
//		
//		ФункцияСравнения = Новый Действие(ЭтотОбъект, "МояФункцияСравнения");
//		ПроцессорКоллекций.Минимум(ФункцияСравнения);
//
Функция Минимум(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ДобавитьШагВКонвейер(Новый ШагКонвейераСортировать(ФункцияСравнения, ДополнительныеПараметры, Отладка));
	ДобавитьШагВКонвейер(Новый ШагКонвейераПолучитьПервый());
	
	Возврат ПройтиКонвейер();

КонецФункции

// Получить максимальный элемент.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Действие - Делегат на функцию с двумя параметрами, в которые будут переданы два элемента,
//    и которая возвращает Число, 1 - если первый элемент больше, -1 если второй элемент больше, 0 - если элементы равны
//                    - Неопределено - см. ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок(),
//    проверка через ">", "<", "="
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Произвольный - максимальный элемент коллекции.
//
//  Примеры:
//		// 1:
//		ПроцессорКоллекций.Максимум();
//
//		// 2:
//		ПроцессорКоллекций.Максимум("(Первый, Второй) -> 
//          | Если Первый > Второй Тогда Возврат 1;
//          | ИначеЕсли Второй > Первый Тогда Возврат -1;
//          | Иначе Возврат 0;
//          | КонецЕсли;"
//      );
//
//		// 3:
//		Функция МояФункцияСравнения(Первый, Второй) Экспорт
//          Если Первый > Второй Тогда 
//              Возврат 1;
//          ИначеЕсли Второй > Первый Тогда
//              Возврат -1;
//          Иначе 
//              Возврат 0;
//          КонецЕсли;
//		КонецФункции
//		
//		ФункцияСравнения = Новый Действие(ЭтотОбъект, "МояФункцияСравнения");
//		ПроцессорКоллекций.Максимум(ФункцияСравнения);
//
Функция Максимум(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Сортировка = Новый ШагКонвейераСортировать(ФункцияСравнения, ДополнительныеПараметры, Отладка);
	Сортировка.Инвертировать();

	ДобавитьШагВКонвейер(Сортировка);
	ДобавитьШагВКонвейер(Новый ШагКонвейераПолучитьПервый());

	Возврат ПройтиКонвейер();

КонецФункции

// Выполнить агрегатную функцию над элементами коллекции.
// Терминальный метод.
//
// Параметры:
//   ФункцияСокращения - Строка - Лямбда выражение функция с двумя параметрами в которые будут переданы 
//    результат аккумулятор и очередной элемент коллекции, и которая возвращает новое значение результата
//                    - Действие - Делегат на функцию с двумя параметрами в которые будут переданы 
//    результат аккумулятор и очередной элемент коллекции, и которая возвращает новое значение результата
//
//   НачальноеЗначение - Произвольный - начальное значение, передаваемое в функцию сокращения в параметр "Результат"
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Произвольный - результат работы агрегатной функции.
//
//  Примеры:
//		2:
//		ПроцессорКоллекций.Сократить("Результат, Элемент -> Результат + Элемент", 0);
//
//		2:
//		Функция МояФункцияСокращения(Результат, Элемент) Экспорт
//			Возврат Результат + Элемент;
//		КонецФункции
//		
//		ФункцияСокращения = Новый Действие(ЭтотОбъект, "МояФункцияСокращения");
//		ПроцессорКоллекций.Сократить(ФункцияСокращения);
//
Функция Сократить(Знач ФункцияСокращения,
                  Знач НачальноеЗначение = Неопределено,
                  Знач ДополнительныеПараметры = Неопределено) Экспорт

	ДобавитьШагВКонвейер(
		Новый ШагКонвейераСократить(ФункцияСокращения, ДополнительныеПараметры, НачальноеЗначение, Отладка)
	);
	Возврат ПройтиКонвейер();

КонецФункции

// Получить коллекцию в виде объекта заданного типа.
// Терминальный метод.
//
// Параметры:
//   ТипРезультата - Тип - Тип, в котором необходимо вернуть коллекцию.
//
//  Возвращаемое значение:
//   Произвольный - Коллекция в виде объекта нужного типа.
//
Функция Получить(ТипРезультата) Экспорт
	ДобавитьШагВКонвейер(Новый ШагКонвейераПолучить(ТипРезультата, КэшКолонок));
	Возврат ПройтиКонвейер();
КонецФункции

// Проверить, что хотя бы один элемент коллекции удовлетворяет условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//                         - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Булево - Истина, если минимум один из элементов коллекции удовлетворяет условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Ложь.
//
Функция ЛюбойСоответствует(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ДобавитьШагВКонвейер(Новый ШагКонвейераЛюбойСоответствует(ФункцияСравнения, ДополнительныеПараметры, Отладка));
	ДобавитьШагВКонвейер(Новый ШагКонвейераБарьерВернутьЗначение(Ложь));

	Возврат ПройтиКонвейер();

КонецФункции

// Проверить, что все элементы коллекции удовлетворяют условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//                         - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Булево - Истина, если все элементы коллекции удовлетворяют условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Истина.
//
Функция ВсеСоответствуют(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Фильтр = Новый ШагКонвейераЛюбойСоответствует(ФункцияСравнения, ДополнительныеПараметры, Отладка);
	Фильтр.Инвертировать();

	ДобавитьШагВКонвейер(Фильтр);
	ДобавитьШагВКонвейер(Новый ШагКонвейераБарьерВернутьЗначение(Истина));

	Возврат ПройтиКонвейер();
	
КонецФункции

// Проверить, что все элементы коллекции не удовлетворяют условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка - Лямбда выражение функция с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//                         - Действие - Делегат на функцию с одним параметром в который будет передан элемент,
//    и которая возвращает Булево, Истина если элемент проходит фильтр, ложь в противном случае
//
//   ДополнительныеПараметры - Структура - Контекст добавляемый в лямбда выражение, 
//    значения будут доступны по обращению к ключу как к переменной.
//    При передачи действия в первом параметре, этот параметр игнорируется
//                           - Сценарий - Экземпляр объекта, который будет захвачен в лямбда выражение,
//    в лямбда выражении будет доступен контекст (публичные и приватные поля, публичные методы) объекта.
//    При передачи действия в первом параметре, этот параметр игнорируется
//
//  Возвращаемое значение:
//   Булево - Истина, если все элементы коллекции не удовлетворяют условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Истина.
//
Функция ВсеНеСоответствуют(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Фильтр = Новый ШагКонвейераЛюбойСоответствует(ФункцияСравнения, ДополнительныеПараметры, Отладка);
	Фильтр.Инвертировать(Истина);

	ДобавитьШагВКонвейер(Фильтр);
	ДобавитьШагВКонвейер(Новый ШагКонвейераБарьерВернутьЗначение(Истина));

	Возврат ПройтиКонвейер();
	
КонецФункции

// Служебные процедуры и функции

Процедура ДобавитьШагВКонвейер(ШагКонвейера)
	
	Если ШагКонвейера.Барьерный() Тогда

		Если Не Конвейер.Получить(НомерПроходаКонвейера) = Неопределено Тогда
			НомерПроходаКонвейера = НомерПроходаКонвейера + 1;
		КонецЕсли;
	
		Конвейер.Вставить(НомерПроходаКонвейера, ШагКонвейера);

	Иначе

		Если Не ТипЗнч(Конвейер.Получить(НомерПроходаКонвейера)) = Тип("Массив")
			И Не Конвейер.Получить(НомерПроходаКонвейера) = Неопределено Тогда
			НомерПроходаКонвейера = НомерПроходаКонвейера + 1;
		КонецЕсли;

		Если Конвейер.Получить(НомерПроходаКонвейера) = Неопределено Тогда
			Конвейер.Вставить(НомерПроходаКонвейера, Новый Массив);
		КонецЕсли;

		Конвейер.Получить(НомерПроходаКонвейера).Добавить(ШагКонвейера);

	КонецЕсли;

КонецПроцедуры

Функция ПройтиКонвейер()

	Для Проход = 1 По НомерПроходаКонвейера Цикл

		ШагПроходаКонвейера = Конвейер.Получить(Проход);

		Если ТипЗнч(ШагПроходаКонвейера) <> Тип("Массив") Тогда // Барьер
			
			Результат = ШагПроходаКонвейера.Принять(Коллекция);

			Если Результат.Действие = ДействияКонвейера.ЗаменитьКоллекцию Тогда
				Коллекция = Результат.Коллекция;
			ИначеЕсли Результат.Действие = ДействияКонвейера.ВернутьЗначение Тогда
				ОчиститьКонвейер();
				Возврат Результат.Значение;
			КонецЕсли;

		Иначе

			НоваяКоллекция = Новый Массив;

			Для каждого ЭлементКоллекции Из Коллекция Цикл
				
				Для каждого ШагКонвейера Из ШагПроходаКонвейера Цикл
					
					Результат = ШагКонвейера.Принять(ЭлементКоллекции);

					Если Результат.Действие = ДействияКонвейера.ПропуститьЭлемент
						Или Результат.Действие = ДействияКонвейера.ПрекратитьОбход Тогда
						Прервать;
					ИначеЕсли Результат.Действие = ДействияКонвейера.ЗаменитьЭлемент Тогда
						ЭлементКоллекции = Результат.Элемент;
					ИначеЕсли Результат.Действие = ДействияКонвейера.ВернутьЗначение Тогда
						ОчиститьКонвейер();
						Возврат Результат.Значение;
					КонецЕсли

				КонецЦикла;

				Если Результат.Действие = ДействияКонвейера.ПропуститьЭлемент Тогда
					Продолжить;
				ИначеЕсли Результат.Действие = ДействияКонвейера.ПрекратитьОбход Тогда
					Прервать;
				КонецЕсли;

				НоваяКоллекция.Добавить(ЭлементКоллекции);

			КонецЦикла;

			Коллекция = НоваяКоллекция;

		КонецЕсли;

	КонецЦикла;

	ОчиститьКонвейер();

КонецФункции

Процедура ОчиститьКонвейер()

	Для Каждого КлючИЗначение Из Конвейер Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Для каждого ШагКонвейера Из КлючИЗначение.Значение Цикл
				ШагКонвейера.Деструктор();
			КонецЦикла;
		Иначе
			КлючИЗначение.Значение.Деструктор();
		КонецЕсли;
	КонецЦикла;

	Конвейер              = Новый Соответствие;
	НомерПроходаКонвейера = 1;

КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	Отладка = ЗначениеЗаполнено(ПолучитьПеременнуюСреды("OSCRIPT_FLUENT_DEBUG"));

	Конвейер = Новый Соответствие;

	НомерПроходаКонвейера = 1;

	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");

КонецПроцедуры
