#Использовать logos
#Использовать notify

Перем Лог;

Перем Коллекция;
Перем КэшКолонок;

Процедура УстановитьКоллекцию(НоваяКоллекция, ОбновлятьКэшКолонок = Истина) Экспорт

	Коллекция = Новый Массив;

	Для Каждого ЭлементНовойКоллекции Из НоваяКоллекция Цикл
		Коллекция.Добавить(ЭлементНовойКоллекции);
	КонецЦикла;

	Если НЕ ОбновлятьКэшКолонок Тогда
		Возврат;
	КонецЕсли;

	КэшКолонок = Новый Массив;

	ЕстьРеквизитКолонки = Истина;
	Попытка
		Колонки = НоваяКоллекция.Колонки;
	Исключение
		ЕстьРеквизитКолонки = Ложь;
	Конецпопытки;

	Если ЕстьРеквизитКолонки Тогда
		Для Каждого Колонка Из НоваяКоллекция.Колонки Цикл
			КэшКолонок.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;

	Лог.Отладка("Кэш колонок содержит %1 колонок", КэшКолонок.Количество());

КонецПроцедуры

Функция ПолучитьКоллекцию() Экспорт
	Возврат Коллекция;
КонецФункции

Функция ПолучитьКэшКолонок() Экспорт
	Возврат КэшКолонок;
КонецФункции

Процедура ВыполнитьПервые(Результат, ДополнительныеПараметры) Экспорт

	Количество = ДополнительныеПараметры.Количество;

	Лог.Отладка("ВыполнитьПервые %1", Количество);

	Результат = Новый Массив;
	Для сч = 0 По Количество - 1 Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПропустить(Результат, ДополнительныеПараметры) Экспорт

	Количество = ДополнительныеПараметры.Количество;

	Лог.Отладка("ВыполнитьПропустить %1", Количество);

	Результат = Новый Массив;
	Для сч = Количество По Коллекция.ВГраница() Цикл
		Элемент = Коллекция[сч];
		Результат.Добавить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьРазличные(Результат, ДополнительныеПараметры) Экспорт

	Лог.Отладка("ВыполнитьРазличные");

	Результат = Новый Массив;

	ОбработчикСравнения = ДополнительныеПараметры.Обработчик;

	Если ОбработчикСравнения.ДополнительныеПараметры = Неопределено Тогда
		ОбработчикСравнения.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ОбработчикСравнения.ДополнительныеПараметры.Вставить("Элемент1");
	ОбработчикСравнения.ДополнительныеПараметры.Вставить("Элемент2");

	Для Каждого Элемент Из Коллекция Цикл

		КоличествоСовпадений = 0;

		Для Каждого ЭлементРезультат Из Результат Цикл
			ОбработчикСравнения.ДополнительныеПараметры.Элемент1 = Элемент;
			ОбработчикСравнения.ДополнительныеПараметры.Элемент2 = ЭлементРезультат;
			РезультатСравнения = Неопределено;
			ОписанияОповещений.ВыполнитьОбработкуОповещения(ОбработчикСравнения, РезультатСравнения);
			Если РезультатСравнения = Истина Тогда
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли;
		КонецЦикла;

		Если КоличествоСовпадений = 0 Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;

	КонецЦикла;
	Лог.Отладка("Размер коллекции после Различные %1", Результат.Количество());

КонецПроцедуры

Процедура ВыполнитьФильтровать(Результат, ДополнительныеПараметры) Экспорт

	Обработчик = ДополнительныеПараметры.Обработчик;

	Лог.Отладка("ВыполнитьФильтровать %1", Обработчик.ИмяПроцедуры);

	Результат = Новый Массив;

	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");

	Для Каждого Элемент Из Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатФильтрации = Ложь;
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатФильтрации);

		Если РезультатФильтрации Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбработать(Результат, ДополнительныеПараметры) Экспорт

	Обработчик = ДополнительныеПараметры.Обработчик;

	Лог.Отладка("ВыполнитьОбработать %1", Обработчик.ИмяПроцедуры);

	Результат = Новый Массив;

	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");

	Для Каждого Элемент Из Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатОбработки = Элемент;
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатОбработки);

		Результат.Добавить(РезультатОбработки);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьРазвернуть(Результат, ДополнительныеПараметры) Экспорт

	Обработчик = ДополнительныеПараметры.Обработчик;

	Лог.Отладка("ВыполнитьРазвернуть %1", Обработчик.ИмяПроцедуры);

	Результат = Новый Массив;

	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент");

	Для Каждого Элемент Из Коллекция Цикл
		Обработчик.ДополнительныеПараметры.Элемент = Элемент;
		РезультатРазворачивания = Элемент;
		ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатРазворачивания);

		ДСО = СтрШаблон("Результат разворачивания для элемента %1 должен иметь тип ПроцессорКоллекций", Элемент);
		Ожидаем.Что(РезультатРазворачивания, ДСО).ИмеетТип("ПроцессорКоллекций");

		РезультатРазворачивания.ДляКаждого(
			"ДополнительныеПараметры.Результат.Добавить(Элемент);",
			Новый Структура("Результат", Результат)
		);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьСортировать(Результат, ДополнительныеПараметры) Экспорт

	Обработчик = ДополнительныеПараметры.Обработчик;

	Лог.Отладка("ВыполнитьСортировать %1", Обработчик.ИмяПроцедуры);

	Результат = Коллекция;

	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	Обработчик.ДополнительныеПараметры.Вставить("Элемент2");

	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к - 1];
			СледующийЭлемент = Результат[к];
			Обработчик.ДополнительныеПараметры.Элемент1 = Элемент;
			Обработчик.ДополнительныеПараметры.Элемент2 = СледующийЭлемент;
			РезультатСортировки = Неопределено;
			ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатСортировки);
			Если РезультатСортировки > 0 Тогда
				Результат[к - 1] = СледующийЭлемент;
				Результат[к] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьСортироватьПо(Результат, ДополнительныеПараметры) Экспорт

	Обработчик = ДополнительныеПараметры.Обработчик;
	ИмяПоля = Обработчик.ДополнительныеПараметры.ИмяПоля;
	Лог.Отладка("ВыполнитьСортироватьПо %1", Обработчик.ИмяПроцедуры);

	Результат = Коллекция;

	Если Обработчик.ДополнительныеПараметры = Неопределено Тогда
		Обработчик.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Обработчик.ДополнительныеПараметры.Вставить("Элемент1");
	Обработчик.ДополнительныеПараметры.Вставить("Элемент2");

	Для й = 0 По Результат.Количество() - 1 Цикл
		Флаг = Ложь;
		к = Результат.Количество() - 1;
		Пока к > й Цикл
			Элемент = Результат[к - 1];
			СледующийЭлемент = Результат[к];

			Обработчик.ДополнительныеПараметры.Элемент1 = Элемент[ИмяПоля];
			Обработчик.ДополнительныеПараметры.Элемент2 = СледующийЭлемент[ИмяПоля];
			РезультатСортировки = Неопределено;
			ОписанияОповещений.ВыполнитьОбработкуОповещения(Обработчик, РезультатСортировки);
			Если РезультатСортировки > 0 Тогда
				Результат[к - 1] = СледующийЭлемент;
				Результат[к] = Элемент;
				Флаг = Истина;
			КонецЕсли;
			к = к - 1;
		КонецЦикла;
		Если НЕ Флаг Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
КонецПроцедуры

Инициализация();
