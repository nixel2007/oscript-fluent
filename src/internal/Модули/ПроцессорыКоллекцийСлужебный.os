#Использовать lambdas

Перем Лог;

Процедура ФункцияСравнения(РезультатСортировки, ДополнительныеПараметры) Экспорт
	Элемент1 = ДополнительныеПараметры.Элемент1;
	Элемент2 = ДополнительныеПараметры.Элемент2;
	
	Если Элемент1 = Элемент2 Тогда
		РезультатСортировки = 0;
	ИначеЕсли Элемент1 > Элемент2 Тогда
		РезультатСортировки = 1;
	Иначе
		РезультатСортировки = -1;
	КонецЕсли;
КонецПроцедуры

Процедура ФункцияОбработки_Сообщить(Результат, ДополнительныеПараметры) Экспорт // BSLLS:UnusedParameters-off
	Элемент = ДополнительныеПараметры.Элемент;
	Сообщить(Элемент);
КонецПроцедуры

// Функция сравнивает два элемента и возвращает результат сравнения
//
// Параметры:
//   ЭлементПервый - Произвольный - Первый сравниваемый элемент
//   ЭлементВторой - Произвольный - Второй сравниваемый элемент
//
//  Возвращаемое значение:
//   Число - Положительное, если первый элемент больше второго 
//           Отрицательное если второй элемент больше первого
//           Ноль если элементы равны
//
Функция СравнениеЗначенийПрямойПорядок(ЭлементПервый, ЭлементВторой) Экспорт
	
	Если ЭлементПервый > ЭлементВторой Тогда
		Возврат 1;
	ИначеЕсли ЭлементПервый < ЭлементВторой Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

// Функция сравнивает два элемента и возвращает результат сравнения
//
// Параметры:
//   ЭлементПервый - Произвольный - Первый сравниваемый элемент
//   ЭлементВторой - Произвольный - Второй сравниваемый элемент
//
//  Возвращаемое значение:
//   Число - Положительное, если второй элемент больше первого
//           Отрицательное если первый элемент больше второго
//           Ноль если элементы равны
//
Функция СравнениеЗначенийОбратныйПорядок(ЭлементПервый, ЭлементВторой) Экспорт
	Возврат -СравнениеЗначенийПрямойПорядок(ЭлементПервый, ЭлементВторой);
КонецФункции

Функция РавенствоЗначений(ЭлементПервый, ЭлементВторой) Экспорт
	Возврат ЭлементПервый = ЭлементВторой;
КонецФункции

Функция ДействиеИзПараметров(
	ОписаниеФункции,
	Интерфейс,
	ДополнительныеПараметры,
	Отладка,
	ЭлементРезультат = Ложь) Экспорт

	Если ТипЗнч(ОписаниеФункции) = Тип("ОписаниеОповещения")
		Или ТипЗнч(ОписаниеФункции) = Тип("Строка") И СтрНайти(ОписаниеФункции, "->") = 0 Тогда

		Действие = ДействиеПоОписаниюОповещения(
			ОписаниеФункции,
			Интерфейс,
			ДополнительныеПараметры,
			Отладка,
			ЭлементРезультат
		);

	ИначеЕсли ТипЗнч(ОписаниеФункции) = Тип("Строка") Тогда

		ЛямбдаВыражение = Лямбда.Выражение(ОписаниеФункции)
			.Интерфейс(Интерфейс)
			.Отладка(Отладка);

		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ЛямбдаВыражение.Контекст(ДополнительныеПараметры);
		ИначеЕсли Не ДополнительныеПараметры = Неопределено Тогда
			ЛямбдаВыражение.ЗахватитьОбъект(ДополнительныеПараметры);
		КонецЕсли;

		Действие = ЛямбдаВыражение.ВДействие();

	Иначе

		Действие = ОписаниеФункции;

	КонецЕсли;

	Возврат Действие;

КонецФункции

Функция ДействиеПоОписаниюОповещения(ОписаниеОповещения, Интерфейс, ДополнительныеПараметры, Отладка, ЭлементРезультат)

	Лог.Предупреждение("
		| Использование синтаксиса лямбда выражений без ""->"" а так же описания оповещения является устаревшим
		| и будет удален в последующих версиях, необходимо заменить места использования"
	);

	ЭтоФункция           = Интерфейс.ПолучитьКартуИнтерфейса()[0].ЭтоФункция;
	КоличествоПараметров = Интерфейс.ПолучитьКартуИнтерфейса()[0].КоличествоПараметров;

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;

	Если КоличествоПараметров = 1 Тогда
		Префикс = "(Элемент) -> ДополнительныеПараметры.Вставить(""Элемент"", Элемент);";
	Иначе
		Префикс = "(Элемент1, Элемент2) ->
		| ДополнительныеПараметры.Вставить(""Элемент1"", Элемент1);
		| ДополнительныеПараметры.Вставить(""Элемент2"", Элемент2);";
	КонецЕсли;
	
	Если ЭлементРезультат Тогда

		Префикс = Префикс + Символы.ПС + "
		| Результат = Элемент1;
		| Элемент = Элемент2;
		| ДополнительныеПараметры.Вставить(""Элемент"", Элемент);";

	Иначе
		Префикс = Префикс + Символы.ПС + "Результат = Неопределено;";
	КонецЕсли;

	Если ЭтоФункция Тогда
		Суффикс = "; Возврат Результат;";
	Иначе
		Суффикс = "";
	КонецЕсли;

	Если ТипЗнч(ОписаниеОповещения) = Тип("Строка") Тогда

		Возврат Лямбда.Выражение(Префикс + ОписаниеОповещения + Суффикс)
			.Отладка(Отладка)
			.Интерфейс(Интерфейс)
			.Контекст(Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры))
			.ВДействие();

	Иначе

		ДополнитьСтруктуру(ДополнительныеПараметры, ОписаниеОповещения.ДополнительныеПараметры, Истина);

		Возврат Лямбда
			.Выражение(Префикс + "
			| Оповещение.ДополнительныеПараметры = ДополнительныеПараметры;
			| ОписанияОповещений.ВыполнитьОбработкуОповещения(Оповещение, Результат)" + Суффикс)
			.Отладка(Отладка)
			.Интерфейс(Интерфейс)
			.Контекст(Новый Структура(
				"Оповещение, ДополнительныеПараметры",
				ОписаниеОповещения,
				ДополнительныеПараметры
			))
			.ВДействие();

	КонецЕсли;

КонецФункции

// Дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - что делать в местах пересечения ключей источника и приемника:
//                                       - Истина - заменять значения приемника (самый быстрый способ),
//                                       - Ложь   - не заменять значения приемника (пропускать),
//                                       - Неопределено - значение по умолчанию. Бросать исключение.
//
// Функция скопирована из "Библиотеки Стандартных Подсистем" на следующих условиях:
//
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
//
// В функцию внесены следующие изменения:
//   - использование СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку заменено на СтрШаблон;
//   - добавлена инициализиация структур приемника и источника
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено)
	
	Если Приемник = Неопределено Тогда
		Приемник = Новый Структура;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Источник = Новый Структура;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Пересечение ключей источника и приемника: ""%1"".'"), Элемент.Ключ);
			КонецЕсли;
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.stream");
