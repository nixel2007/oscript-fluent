#Использовать asserts
#Использовать notify
#Использовать ".."


Функция ПолучитьНачальныйМассив()
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(0);
	Массив.Добавить(3);
	Массив.Добавить(2);
	Массив.Добавить(3);
	Массив.Добавить(1);

	Возврат Массив;
КонецФункции

Функция ПолучитьПроцессорКоллекций()

	Возврат ПроцессорыКоллекций.ИзКоллекции(ПолучитьНачальныйМассив());

КонецФункции

Процедура ФункцияОбработкиСПроверкойДопПараметров(Результат, ДополнительныеПараметры) Экспорт
	Результат = ДополнительныеПараметры.ПроверяемыйПараметр;
КонецПроцедуры

// основной метод для тестирования
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПолучитьПервый");
	ВсеТесты.Добавить("ТестДолжен_ВернутьМассив");
	ВсеТесты.Добавить("ТестДолжен_ВернутьСтроку");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьКоличество");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьДляКаждого");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМинимальныйЭлемент");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМаксимальныйЭлемент");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьСокращение");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМассив");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьТаблицуЗначений");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьСписокЗначений");
	// ВсеТесты.Добавить("ТестДолжен_ПолучитьСтруктуру");
	// ВсеТесты.Добавить("ТестДолжен_ПолучитьСоответствие");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЛюбойСоответствует");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВсеСоответствуют");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВсеНеСоответствуют");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьПробросДополнительныхПараметровВОповещениеДляКаждого");
	
	// ВсеТесты.Добавить("ТестДолжен_ПроинициализироватьПроцессорКоллекцийЧерезПомощник");

	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПолучитьПервый() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.ПолучитьПервый();
	Ожидаем.Что(Результат).ИмеетТип("Число").Равно(1);
КонецПроцедуры

Процедура ТестДолжен_ВернутьМассив() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.ВМассив();
	Ожидаем.Что(Результат).ИмеетТип("Массив").ИмеетДлину(6);
КонецПроцедуры

Процедура ТестДолжен_ВернутьСтроку() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.ВСтроку();
	Ожидаем.Что(Результат).ИмеетТип("Строка").ИмеетДлину(6);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьКоличество() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Количество();
	Ожидаем.Что(Результат).Равно(6);
КонецПроцедуры

Процедура ТестДолжен_ВыполнитьДляКаждого() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВнешнийМассив", Новый Массив);
	ПроцессорКоллекций.ДляКаждого("ДополнительныеПараметры.ВнешнийМассив.Добавить(Элемент + 1)", ДополнительныеПараметры);
	Ожидаем.Что(ДополнительныеПараметры.ВнешнийМассив).ИмеетДлину(НачальныйМассив.Количество());
	Для сч = 0 По ДополнительныеПараметры.ВнешнийМассив.ВГраница() Цикл
		Ожидаем.Что(ДополнительныеПараметры.ВнешнийМассив[сч]).Равно(НачальныйМассив[сч] + 1);
	КонецЦикла;
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМинимальныйЭлемент() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Минимум();
	Ожидаем.Что(Результат).Равно(0);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМаксимальныйЭлемент() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Максимум();
	Ожидаем.Что(Результат).Равно(3);
КонецПроцедуры

Процедура ТестДолжен_ВыполнитьСокращение() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	
	Результат = ПроцессорКоллекций.Сократить("Результат = Результат + Элемент", 0);
	Ожидаем.Что(Результат).Равно(10);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМассив() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();

	Результат = ПроцессорКоллекций.Получить(Тип("Массив"));
	Ожидаем.Что(Результат).ИмеетТип("Массив").ИмеетДлину(НачальныйМассив.Количество());

	Для сч = 0 По НачальныйМассив.ВГраница() Цикл
		Ожидаем.Что(НачальныйМассив[сч]).Равно(Результат[сч]);
	КонецЦикла;

КонецПроцедуры

Процедура ТестДолжен_ПолучитьТаблицуЗначений() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();
	
	Результат = ПроцессорКоллекций.Получить(Тип("ТаблицаЗначений"));
	Ожидаем.Что(Результат).ИмеетТип("ТаблицаЗначений").ИмеетДлину(НачальныйМассив.Количество());
	
	Для сч = 0 По НачальныйМассив.ВГраница() Цикл
		Ожидаем.Что(НачальныйМассив[сч]).Равно(Результат[сч].Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьСписокЗначений() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();
	
	Результат = ПроцессорКоллекций.Получить(Тип("СписокЗначений"));
	Ожидаем.Что(Результат).ИмеетТип("СписокЗначений").ИмеетДлину(НачальныйМассив.Количество());
	
	Для сч = 0 По НачальныйМассив.ВГраница() Цикл
		Ожидаем.Что(НачальныйМассив[сч]).Равно(Результат[сч].Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьСтруктуру()
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();
	
	Результат = ПроцессорКоллекций.Получить(Тип("Структура"));
	Ожидаем.Что(Результат).ИмеетТип("Структура").ИмеетДлину(НачальныйМассив.Количество());
	
	Для сч = 0 По НачальныйМассив.ВГраница() Цикл
		Ожидаем.Что(НачальныйМассив[сч]).Равно(Результат[сч].Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьСоответствие()
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	НачальныйМассив = ПолучитьНачальныйМассив();
	
	Результат = ПроцессорКоллекций.Получить(Тип("Соответствие"));
	Ожидаем.Что(Результат).ИмеетТип("Соответствие").ИмеетДлину(НачальныйМассив.Количество());
	
	Для сч = 0 По НачальныйМассив.ВГраница() Цикл
		Ожидаем.Что(НачальныйМассив[сч]).Равно(Результат[сч].Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЛюбойСоответствует() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	
	Результат = ПроцессорКоллекций.ЛюбойСоответствует("Результат = Элемент > 1");
	Ожидаем.Что(Результат).ЭтоИстина();
	
	Результат = ПроцессорКоллекций.ЛюбойСоответствует("Результат = Элемент < 0");
	Ожидаем.Что(Результат).ЭтоЛожь();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВсеСоответствуют() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	
	Результат = ПроцессорКоллекций.ВсеСоответствуют("Результат = Элемент >= 0");
	Ожидаем.Что(Результат).ЭтоИстина();
	
	Результат = ПроцессорКоллекций.ВсеСоответствуют("Результат = Элемент < 2");
	Ожидаем.Что(Результат).ЭтоЛожь();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВсеНеСоответствуют() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	
	Результат = ПроцессорКоллекций.ВсеНеСоответствуют("Результат = Элемент < 0");
	Ожидаем.Что(Результат).ЭтоИстина();
	
	Результат = ПроцессорКоллекций.ВсеНеСоответствуют("Результат = Элемент > 2");
	Ожидаем.Что(Результат).ЭтоЛожь();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПробросДополнительныхПараметровВОповещениеДляКаждого() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	
	ДополнительныеПараметры = Новый Структура("ПроверяемыйПараметр");
	ФункцияОбработки = Новый ОписаниеОповещения(
		"ФункцияОбработкиСПроверкойДопПараметров",
		ЭтотОбъект,
		ДополнительныеПараметры
	);

	// Ожидаем, что все варианты не выкинут исключения
	ПроцессорКоллекций.ДляКаждого(ФункцияОбработки);
	ПроцессорКоллекций.ДляКаждого("Результат = ДополнительныеПараметры.ПроверяемыйПараметр;", ДополнительныеПараметры);

	ФункцияОбработки = Новый ОписаниеОповещения(
		"ФункцияОбработкиСПроверкойДопПараметров",
		ЭтотОбъект
	);
	ПроцессорКоллекций.ДляКаждого(ФункцияОбработки, ДополнительныеПараметры);
	
КонецПроцедуры
